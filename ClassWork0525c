
package classwork05.pkg25b;
public class Dice implements Runnable
{
   private int randomNum;
   private int max = 0;
   private int counter = 0;
   
   public Dice(int max)
   {      
      this.max = max;
   } // end Dice constructor

   public void Throw()
   {
      randomNum = ((int)(Math.random()*6)+1);
      counter++;
   }
    
   public int getRandomNumber()
   {
      return randomNum; // generate a random number
   }

   public int getHistory()
   {
      return counter;     // counts the number of times played
   }
   
   @Override
   public void run()
   {
      String thread = Thread.currentThread().getName();
      
      for (long i = 1; i < max; i++)
      {
         Throw();
         System.out.printf("Thread: %s, Dice is: %d, Count is: %d %n", thread, randomNum, counter);
      }
   }
}


package classwork05.pkg25b;

import java.util.Random;

public class PrintTask implements Runnable
{
   private final int sleepTime;        // random sleep time for thread
   private final String taskName;      // name of task
   private final static Random generator = new Random();
   
   public PrintTask(String name)
   {
      taskName = name;        // set task name
      
      // pick random sleep time between 0 and 5 seconds
      sleepTime = generator.nextInt(5000);      // milliseconds
   }
   
   public void run()
   {
      try         // put thread to sleep for sleepTime amount of time
      {
         System.out.printf("%s going to sleep for %d milliseconds.\n",
                 taskName, sleepTime);
         Thread.sleep(sleepTime);      // put thread to sleep
      }
      catch (InterruptedException exception)
      {
         System.out.printf("%s %s\n", taskName, "terminated prematurely due to interruption");
      }
      
      // print task name
      System.out.printf("%s done sleeping\n", taskName);
   }
}


package classwork05.pkg25b;

import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;

public class ClassWork0525b
{
 public static void main(String[] args)
   {
      int counter = 0;
      PrintTask task1 = new PrintTask("task1");
      
      System.out.println("Start");
      
      	for (int i = 0; i < 1; i++) 
            {
		      Runnable T1 = new Dice(25);
		      Thread worker = new Thread(T1);
		      // We can set the name of the thread
		      worker.setName(String.valueOf(10));
		      // Start the thread, never call method run() direct
		      worker.start();
            
            System.out.println("Starting Executor");
            
            // create ExecutorService to manage thread
            ExecutorService threadExecutor = Executors.newCachedThreadPool();
            
            // start threads and place in runnable state
            threadExecutor.execute(task1);   // start task1
           
            // shut down worker threads when their tasks complete
            threadExecutor.shutdown();
            
            System.out.println("Tasks started, main ends.\n");
            }
         
         System.out.println("Complete");
   }   
}
