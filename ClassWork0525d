
package classwork05.pkg25c;

import java.util.Random;

public class Dice implements Runnable
{
   private int count = 0;
	private int max = 0;
	private int randomNumber;
	private final resultsArray shareResultsArray;
	private final String taskName;
	private final static Random generator = new Random();

	public Dice(int max,String taskName,resultsArray array){
		this.max = max;
		this.taskName = taskName;
		shareResultsArray = array;
	}
	public void Throw()
	{
		count++;
		randomNumber =( (int)(Math.random()*6 ) + 1 );
	}
	
	@Override
	public void run()
	{
		for(int i= 1 ; i <=max;i++)
		{
			Throw();		
			System.out.printf("Thread : %s dice is : %d , count is : %d %n",taskName,randomNumber,count);
			shareResultsArray.add(randomNumber);
		}
	}
}


package classwork05.pkg25c;

import java.util.Arrays;
import java.util.Random;

public class resultsArray
{
   private final int[] array;
	private int writerIndex = 0;
	private int size = 0;
	private final static Random generator = new Random();
   
	public resultsArray(int size)
	{
		this.size = size;
		array = new int[size];
	}

	public synchronized void add(int value)
	{
		int position = writerIndex;
      
		try{
			Thread.sleep(generator.nextInt(500));		
		}catch(InterruptedException ex)
		{
			ex.printStackTrace();
		}
		array[position]=value;
		System.out.printf("%s wrote %2d tp element %d. \n",Thread.currentThread().getName(),value, position);
		++writerIndex;
		if(writerIndex<size)
		System.out.printf("next write index : %d \n",writerIndex);		
	}
	public String toString()
	{
		return "\nContents of singArray:\n" + Arrays.toString(array);
	}
}

package classwork05.pkg25c;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ClassWork0525c
{
   public static void main(String[] args)
   {
		System.out.println("Start");
      
		resultsArray shareTaskArray= new resultsArray(12);
      
		Dice task1 = new Dice(3,"task 1",shareTaskArray);
		Dice task2 = new Dice(4,"task 2",shareTaskArray);
		Dice task3 = new Dice(5,"task 3",shareTaskArray);
		
		System.out.println("Starting Executor....");
      
		ExecutorService threadExcutor= Executors.newCachedThreadPool();
		threadExcutor.execute(task1);
		threadExcutor.execute(task2);
		threadExcutor.execute(task3);
		
		threadExcutor.shutdown();
		
		try
		{
			boolean taskEnd = threadExcutor.awaitTermination(1, TimeUnit.MINUTES);
         
			if(taskEnd)
			{
				System.out.println(shareTaskArray);
			}else{				
				System.out.println("Time out while waiting for task to finish.");
			}
		}catch (InterruptedException ex)
		{
			System.out.println("Interrupt while waiting for task to finish ");
		}
		System.out.println("Task started completed");
   }
   
}
